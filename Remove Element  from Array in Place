Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.

Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
Return k.
Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int val = ...; // Value to remove
int[] expectedNums = [...]; // The expected answer with correct length.
                            // It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, 0, k); // Sort the first k elements of nums
for (int i = 0; i < actualLength; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:

0 <= nums.length <= 100
0 <= nums[i] <= 50
0 <= val <= 100


--------------

// Intuition
//<!-- Describe your first thoughts on how to solve this problem. -->

// Approach
//<!-- Describe your approach to solving the problem. -->

//# Complexity
//- Time complexity:
//<!-- Add your time complexity here, e.g. $$O(n)$$ -->

//- Space complexity:
//<!-- Add your space complexity here, e.g. $$O(n)$$ -->
/*Initialize a pointer k: This pointer will keep track of the position where the next element that is not equal to val should be placed.

Iterate through the array: For each element in the array, check if it is not equal to val.

Place the element at position k: If the element is not equal to val, place it at the position k and increment k.

Return k: After processing all elements, k will represent the number of elements that are not equal to val. */

class Solution {
    fun removeElement(nums: IntArray, `val`: Int): Int {
        var k = 0 
        //To achieve this, we use a pointer k to track the position where the next valid element (not equal to val) should be placed.
        for(i in 0 until nums.size) {
            if(nums[i] != `val`) {
        
                nums[k] = nums[i]
                k++
            }
        }
       return k 
    }
}

/*Time Complexity:
The time complexity of this solution is O(n), where n is the length of the array nums. This is because we are iterating through the array once.

Space Complexity:
The space complexity is O(1) since we are modifying the array in-place and using only a constant amount of extra space. */
